xlab=tab)
g1 <- waffle(sch2014,
rows=10,
colors=colors1,
scaleColor = School_2014$event_color,
scaleValues = School_2014$percent,
title='Coffee Hours(2014)',
size=.85,
pad=2,
xlab=tab)
library(ggplot2)
source('~/apps-R/i3/waffle/R/waffle.R')
library(grid)
library(gridExtra)
#library(cowplot)
library(plyr)
library(dplyr)
tab <- '1 square â‰ˆ 5 families'
g1 <- waffle(sch2014,
rows=10,
colors=colors1,
scaleColor = School_2014$event_color,
scaleValues = School_2014$percent,
title='Coffee Hours(2014)',
size=.85,
pad=2,
xlab=tab)
g1<-g1 + additions
g2 <- waffle(sch2015,
rows=10,
colors=colors2,
scaleColor = School_2014$event_color,
scaleValues = School_2015$percent,
title='Coffee Hours(2015)',
size=.85,
pad=2,
xlab=tab)
g2<-g2 + additions
multiplot(g1,g2)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(g1,g2)
library(cowplot)
p1 <- qplot(1:10, 1:10)
p2 <- qplot(1:10, (1:10)^2)
p3 <- qplot(1:10, (1:10)^3)
p4 <- qplot(1:10, (1:10)^4)
plot_grid(p1, p2, p3, p4)
plot_grid(p1, p2, p3, p4, labels=c('A', 'B', 'C', 'D'), align="hv")
plot_grid(p1, p2, p3, p4)
plot_grid(p1, p2, p3, p4, labels=c('A', 'B', 'C', 'D'), align="hv")
plot_grid(p1, p2, p3, nrow=3, labels=c('A', 'B', 'C', 'D'), label_size=12, align="v")
plot_grid(p1, NULL, NULL, p2, p3, NULL, ncol=2,labels=c('A', 'B', 'C', 'D', 'E', 'F'), label_size=12, align="v")
plot_grid(p1, p2, p3, p4, align='hv', rel_heights=c(2,1), rel_widths=c(1,2))
plot_grid(p1, p2, p3, p4, align='hv', rel_heights=c(2,1), rel_widths=c(1,4))
plot_grid(p1, p2, p3, p4, align='hv', rel_heights=c(2,1), rel_widths=c(1,3))
plot_grid(p1, p2, p3, p4, align='hv', rel_heights=c(2,1), rel_widths=c(1,2))
plot_grid(p1, p2, p3, align='hv', rel_heights=c(2,1), rel_widths=c(1,2))
p <- ggplot(mtcars, aes(mpg, disp)) + geom_line(colour = "blue") + background_grid(minor='none')
c <- cor.test(mtcars$mpg, mtcars$disp, method='sp')
label <- substitute(paste("Spearman ", rho, " = ", estimate, ", P = ", pvalue),list(estimate = signif(c$estimate, 2), pvalue = signif(c$p.value, 2)))
ggdraw(p) + draw_label(label, .7, .9)
p + draw_label(label, 20, 400, hjust = 0, vjust = 0)
plot_grid(p1, p2, p3, p4, align='hv', rel_heights=c(2,1), rel_widths=c(1,4))
plot_grid(p1, p2, p3, p4, align='hv', rel_heights=c(2,1), rel_widths=c(1,2))
plot_grid(p1, p2, NA, p4, align='hv', rel_heights=c(2,1), rel_widths=c(1,2))
plot1 <- qplot(1)
plot2 <- qplot(1)
plot_grid(plot1, plot2, align='h', labels=c('A', 'B'))
p <- # minimal example
qplot(0,0, geom="blank")+ annotate("text",0,0,label="alpha")
p
g <- # store the plot as a grob
ggplotGrob(p)
# structure of the grob
# grid.ls(g) # rather large!
# find a particular grob in the gTree
# grid.ls(grob=F, view=T)
grid.ls(getGrob(g,"texts", grep = T))
grid.edit(gPath("texts.gTree", "GRID.text"), grep=TRUE,
gp=gpar(col="pink"))
grid.edit(gPath("texts.gTree", "GRID.text"), grep=TRUE,
label=expression(alpha^2), gp=gpar(col="red"))
library(ggplot2)
p <- # minimal example
qplot(0,0, geom="blank")+ annotate("text",0,0,label="alpha")
p
g <- # store the plot as a grob
ggplotGrob(p)
# structure of the grob
# grid.ls(g) # rather large!
# find a particular grob in the gTree
# grid.ls(grob=F, view=T)
grid.ls(getGrob(g,"texts", grep = T))
grid.edit(gPath("texts.gTree", "GRID.text"), grep=TRUE,
gp=gpar(col="pink"))
grid.edit(gPath("texts.gTree", "GRID.text"), grep=TRUE,
label=expression(alpha^2), gp=gpar(col="red"))
library(ggplot2)
p <-
qplot(0,0, geom="blank")+ annotate("text",0,0,label="alpha")
p
g <- # store the plot as a grob
ggplotGrob(p)
g
grid.ls(getGrob(g,"texts", grep = T))
library(gridExtra)
grid.ls(getGrob(g,"texts", grep = T))
library(grid)
grid.ls(getGrob(g,"texts", grep = T))
library(ggplot2)
p1 = qplot(1:10,rnorm(10))
p2 = qplot(1:10,rnorm(10))
library(gridExtra)
grid.arrange(p1, p2, ncol=2, main = "Main title")
p1 = qplot(1:10,rnorm(10))
p1
grid.arrange(p1, p2, ncol=2, main = "Main title")
p1 <- qplot(1:10, 1:10)
p2 <- qplot(1:10, (1:10)^2)
p3 <- plot()
ggplot(mtcars, aes(x = wt, y = mpg)) + geom_blank()
p3 <- plot.new()
p4 <- qplot(1:10, (1:10)^4)
plot_grid(p1, p2, p3, p4, align='hv', rel_heights=c(2,1), rel_widths=c(1,2))
library(cowplot)
plot_grid(p1, p2, p3, p4, align='hv', rel_heights=c(2,1), rel_widths=c(1,2))
library(ggplot2)
library(grid)
library(plyr)
library(dplyr)
library(cowplot)
library(gridExtra)
LEFT_MARGIN <- c(1,.25,1,-.5)
RIGHT_MARGIN <- c(1,1,1,-.25)
Race_2014<-read.table(header=TRUE, text='
Activity    Percentage	Race
"Visited\nparent room"	85	"Latino"
"Visited\nparent room"	7	"Black"
"Visited\nparent room"	5	"White"
"Visited\nparent room"	3	"Multiracial"
"Received\nsupport"	86	"Latino"
"Received\nsupport"	6	"Black"
"Received\nsupport"	5	"White"
"Received\nsupport"	3	"Multiracial"
"Attended\ncoffee hour"	88	"Latino"
"Attended\ncoffee hour"	9	"Black"
"Attended\ncoffee hour"	2	"White"
"Attended\ncoffee hour"	1	"Multiracial"
"Volunteered"	92	"Latino"
"Volunteered"	3	"Black"
"Volunteered"	3	"White"
"Volunteered"	2	"Multiracial"
"Participating\nschools\naverage"	75	"Latino"
"Participating\nschools\naverage"	10	"Black"
"Participating\nschools\naverage"	11	"White"
"Participating\nschools\naverage"	4	"Multiracial"'
)
#Race 2015
Race_2015<-read.table(header=TRUE, text='
Activity    Percentage	Race
"Visited\nparent room"	89	"Latino"
"Visited\nparent room"	4	"Black"
"Visited\nparent room"	5	"White"
"Visited\nparent room"	2	"Multiracial"
"Received\nsupport"	82	"Latino"
"Received\nsupport"	7	"Black"
"Received\nsupport"	6	"White"
"Received\nsupport"	5	"Multiracial"
"Attended\ncoffee hour"	88	"Latino"
"Attended\ncoffee hour"	4	"Black"
"Attended\ncoffee hour"	7	"White"
"Attended\ncoffee hour"	1	"Multiracial"
"Volunteered"	88	"Latino"
"Volunteered"	6	"Black"
"Volunteered"	6	"White"
"Volunteered"	0	"Multiracial"
"Participating\nschools\naverage"	75	"Latino"
"Participating\nschools\naverage"	10	"Black"
"Participating\nschools\naverage"	11	"White"
"Participating\nschools\naverage"	4	"Multiracial"'
)
acts<-c(
"Volunteered",
"Visited\nparent room",
"Received\nsupport",
"Attended\ncoffee hour",
"Participating\nschools\naverage")
races <- c(
'Latino',
'Black',
'White',
'Multiracial'
)
#Sort by activity in order of acts vector
Race_2014$Activity <- factor(Race_2014$Activity, levels=acts)
Race_2015$Activity <- factor(Race_2015$Activity, levels=acts)
#create cordinates for both charts geom_text
Race_2014 = ddply(Race_2014, "Activity", mutate,
label_y=cumsum(Percentage) - .5*Percentage)
Race_2015 = ddply(Race_2015, "Activity", mutate,
label_y=cumsum(Percentage) - .5*Percentage)
rg1 <- ggplot(Race_2014, aes(x=Activity,y=Percentage,ymax=Percentage,fill=Race))
rg1 <- rg1 + geom_bar(stat='identity')
rg1 <- rg1 + geom_text(aes(y=label_y, label=Percentage), size=4,coloor='white')
rg1 <- rg1 +coord_flip()
rg1 <- rg1 + ggtitle("Race 2014")
rg1 <- rg1 + scale_fill_discrete(name="Races",
breaks=races,
labels=races)
rg1 <- rg1 + labs(x="")
# white background
rg1 <- rg1 + theme_bw()
# style title
rg1 <- rg1 + theme(
plot.title = element_text(family = "Helvetica",
color="#666666",
size=22, vjust=1),
# tick marks grid lines
axis.line = element_line(colour = "888888"),
axis.ticks.x=element_blank(),
axis.text.y=element_text(color="#777777",
size=10),
axis.text.x=element_text(color="#222222",
size=12),
axis.ticks.y=element_line(),
#Remove gridlines
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# remove legend
legend.position="none",
legend.title=element_blank(),
plot.title = element_text(hjust = 0),
plot.margin=unit(LEFT_MARGIN, "cm"))
rg2 <- ggplot(Race_2015, aes(x=Activity,y=Percentage,ymax=Percentage,fill=Race))
rg2 <- rg2 + geom_bar(stat='identity')
rg2 <- rg2 + geom_text(aes(y=label_y, label=Percentage), size=4,coloor='white')
rg2 <- rg2 +coord_flip()
rg2 <- rg2 + ggtitle("Race 2015")
rg2 <- rg2 + scale_fill_discrete(breaks = levels(Race_2014$Race))
# remove lables
rg2 <- rg2 + labs(x="")
# white background
rg2 <- rg2 + theme_bw()
# style title
rg2 <- rg2 + theme(
plot.title = element_text(family = "Helvetica",
color="#666666",
size=22, vjust=1),
# tick marks grid lines
axis.line = element_line(colour = "888888"),
axis.ticks.x=element_blank(),
#axis.text.y=element_text(color="#777777",
#                         size=12),
axis.text.x=element_text(color="#222222",
size=12),
#axis.ticks.y=element_line(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
#Remove gridlines
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position="none",
plot.title = element_text(hjust = 0),
plot.margin=unit(RIGHT_MARGIN, "cm"))
grid_arrange_shared_legend <- function(...) {
plots <- list(...)
g <- ggplotGrob(plots[[1]] + theme(legend.position="bottom"))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
print(lheight)
p3 <- plot.new()
plot_grid(rg1,rg2,p3,legend,nrow=1,ncol=2)
#     grid.arrange(
#         groupOne,
#         legend,
#         ncol = 1,
#         heights = unit.c(unit(1, "npc") - lheight, lheight))
}
grid_arrange_shared_legend(rg1,rg2)
grid_arrange_shared_legend <- function(...) {
plots <- list(...)
g <- ggplotGrob(plots[[1]] + theme(legend.position="bottom"))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
print(lheight)
p3 <- plot.new()
plot_grid(rg1,rg2,p3,legend,nrow=2,ncol=2)
#     grid.arrange(
#         groupOne,
#         legend,
#         ncol = 1,
#         heights = unit.c(unit(1, "npc") - lheight, lheight))
}
grid_arrange_shared_legend(rg1,rg2)
grid_arrange_shared_legend <- function(...) {
plots <- list(...)
g <- ggplotGrob(plots[[1]] + theme(legend.position="bottom"))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
print(lheight)
#     plot_grid(rg1,rg2,p3,legend,nrow=2,ncol=2)
groupOne <- plot_grid(rg1,rg2,nrow=1,ncol=2)
grid.arrange(
groupOne,
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight))
}
ed<-grid_arrange_shared_legend(rg1,rg2)
e <- list(1,2,3,4)
names(e) <- list('ted','med','sed','wed')
e
e['wed']
list1 <- list(a = 2, b = 3)
list2 <- list(c = "a", d = "b")
mylist <- list(list1, list2)
mylist
mylist[1]
mylist[[1]]
mylist[[1]]['a']
mylist[[1]]['b']
mylist[1]['b']
library(tm)
z = list()
z("foo") = c(1,2,3)
z["foo"] = c(1,2,3)
z <- list()
z["foo"] <- c(1,2,3)
z("foo") <- c(1,2,3)
install.packages("hash")
library(hash)
h <- hash( keys=letters, values=1:26 )
h <- hash(keys=letters, values=1:26)
h
h['z']
h$foo <- 'bar'
h
h['ted']<-'never!'
h
h[['foo']]
h['foo']
h[['foo','ted']]
h[['foo'],['ted']]
h[['foo']]
h[[c]]+h[[b]]
h[[c]]
h[[a]]
h
h[a]
h['a']
h['a']+h['b']
h[['a']]+h[['b']]
clear(h)
j
h
rm(h)
h
library(ggplot2)
.libPaths()
install.packages("ggplot2")
install.packages("cow")
install.packages("cowplot")
install.packages("dplyr")
logistical = function(num, max=1, min=0, smooth=2.718) {
return (max-min) / (1 + 100 * pow(smooth,-num)) + min;
}
plot(logistical)
logistical = function(x, max=1, min=0, smooth=2.718) {
((max-min) / (1 + 100 * smooth^-num)) + min;
}
plot(logistical)
logistical = function(x, max=1, min=0, smooth=2.718) {
return ((max-min) / (1 + 100 * smooth^-num)) + min;
}
logistical = function(x, max=1, min=0, smooth=2.718) {
((max-min) / (1 + 100 * smooth^(-x))) + min;
}
plot(logistical)
plot(logistical, .00001, 50)
logistical = function(x, max=1, min=0, smooth=2.718) {
((max-min) / (1 + 100 * smooth^(-x))) + min;
}
logistical = function(x, max=1, min=0, smooth=1.218) {
((max-min) / (1 + 100 * smooth^(-x))) + min;
}
plot(logistical, .00001, 50)
plot(logistical, .00001, 150)
logistical = function(x, max=1, min=0, smooth=1.018) {
((max-min) / (1 + 100 * smooth^(-x))) + min;
}
plot(logistical, .00001, 150)
logistical = function(x, max=1, min=0, smooth=1.118) {
((max-min) / (1 + 100 * smooth^(-x))) + min;
}
plot(logistical, .00001, 150)
logistical = function(x, max=1, min=0, smooth=1.1) {
((max-min) / (1 + 100 * smooth^(-x))) + min;
}
plot(logistical, .00001, 150)
logistical = function(x, max=1, min=0, smooth=1.09) {
((max-min) / (1 + 100 * smooth^(-x))) + min;
}
plot(logistical, .00001, 150)
logistical = function(x, max=1, min=0, smooth=1.05) {
((max-min) / (1 + 100 * smooth^(-x))) + min;
}
plot(logistical, .00001, 150)
logistical = function(x, max=1, min=2, smooth=1.05) {
((max-min) / (1 + 100 * smooth^(-x))) + min;
}
plot(logistical, .00001, 150)
logistical = function(x, max=10, min=2, smooth=1.05) {
((max-min) / (1 + 100 * smooth^(-x))) + min;
}
plot(logistical, .00001, 150)
plot(logistical, .000001, 150)
plot(logistical, .0001, 150)
logistical = function(x, max=10, min=4, smooth=1.05) {
((max-min) / (1 + 100 * smooth^(-x))) + min;
}
plot(logistical, .0001, 150)
plot(logistical, .0001, 150)
logistical(10)
logistical(50)
logistical(150)
logistical(100)
logistical = function(x, max=10, min=4, smooth=1.15) {
((max-min) / (1 + 100 * smooth^(-x))) + min;
}
logistical(100)
curve(logistical, .0001, 150)
logistical = function(x, max=10, min=4, smooth=1.05) {
((max-min) / (1 + 100 * smooth^(-x))) + min;
}
curve(logistical, .0001, 150)
optimize(logistical, c(.0001, 150))
setw('~/Desktop/desktop')
setwd('~/Desktop/desktop')
ls
library(ggplot2)
library(dplyr)
#setwd('~/Desktop')
#setwd('~/apps-js/d3-exp/modular-d3/seven-b/src/data')
gen <- read.delim('gwas_catalog_v1.0.1-associations_e84_r2016-04-17.tsv')
gen
row.names(gen)
row.names(gen)
names(gen)
head(gen)
library(ggplot2)
library(dplyr)
#setwd('~/Desktop')
setwd('~/apps-js/d3-exp/modular-d3/GWAS/src/data')
gen <- read.delim('gwas_catalog_v1.0.1-associations_e84_r2016-04-17.tsv')
names(gen) <- gsub(x = names(gen),
pattern = "\\.",
replacement = "_")
write.csv(gen, file = "geneData.csv",row.names=FALSE, na="")
gen.smaller = gen %>%
select(
DISEASE_TRAIT,
PVALUE_MLOG,
STUDY,
REGION,
CHR_ID,
CHR_POS,
MAPPED_GENE,
P_VALUE,
SNPS,
MAPPED_TRAIT,
MAPPED_TRAIT_URI,
SNP_ID_CURRENT,
OR_or_BETA,
FIRST_AUTHOR,
LINK,
CONTEXT) %>%
filter(!is.na(OR_or_BETA))  %>%
filter(!is.na(PVALUE_MLOG))  %>%
filter(!is.na(DISEASE_TRAIT)) %>%
mutate(SNP_ID_CURRENT = as.numeric(SNP_ID_CURRENT)) %>%
filter(!is.na(SNP_ID_CURRENT))
#filter(OR_or_BETA < 10 )
#%>%
#  filter(DISEASE.TRAIT == 'Melanoma')
write.csv(gen.smaller, file = "geneData.csv",row.names=FALSE, na="")
